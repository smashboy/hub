// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id              Int                      @id @default(autoincrement())
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  email           String                   @unique
  username        String                   @unique
  hashedPassword  String?
  isEmailVerified Boolean                  @default(false)
  isVerified      Boolean                  @default(false)
  avatarUrl       String?
  bio             String?
  role            UserRole                 @default(USER)
  tokens          Token[]
  sessions        Session[]
  projectMember   ProjectMember[]
  feedback        ProjectFeedback[]        @relation("ProjectFeedbackAuthor")
  upvoted         ProjectFeedback[]
  messages        ProjectFeedbackMessage[]
  projectInvites  ProjectInvite[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

model Project {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  color       String
  isPrivate   Boolean
  slug        String             @unique
  description String?
  websiteUrl  String?
  logoUrl     String?
  feedback    ProjectFeedback[]
  members     ProjectMember[]
  landing     ProjectLanding?
  changelogs  ProjectChangelog[]
  roadmaps    ProjectRoadmap[]
  settings    ProjectSettings?
  invites     ProjectInvite[]
}

model ProjectMember {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])
  role      ProjectMemberRole @default(FOLLOWER)
  project   Project           @relation(fields: [projectId], references: [id])
  projectId Int
  userId    Int
  assigned  ProjectFeedback[]

  @@unique([projectId, userId])
}

model ProjectInvite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  userId    Int
}

model ProjectLanding {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int      @unique
}

model ProjectChangelog {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  content     String
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
}

model ProjectRoadmap {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  slug        String            @unique
  title       String
  description String?
  project     Project           @relation(fields: [projectId], references: [id])
  projectId   Int
  feedback    ProjectFeedback[]
}

model ProjectFeedback {
  id           Int                      @id @default(autoincrement())
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  participants ProjectMember[]
  roadmaps     ProjectRoadmap[]
  labels       ProjectFeedbackLabel[]
  project      Project                  @relation(fields: [projectSlug], references: [slug])
  projectSlug  String
  author       User                     @relation("ProjectFeedbackAuthor", fields: [authorId], references: [id])
  authorId     Int
  content      ProjectFeedbackContent   @relation(fields: [contentId, projectSlug], references: [id, projectSlug])
  contentId    Int
  upvotedBy    User[]
  messages     ProjectFeedbackMessage[]
}

model ProjectFeedbackMessage {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  isPublic   Boolean         @default(true)
  content    String
  author     User            @relation(fields: [userId], references: [id])
  userId     Int
  feedback   ProjectFeedback @relation(fields: [feedbackId], references: [id])
  feedbackId Int
}

model ProjectFeedbackContent {
  id              Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String
  category        FeedbackCategory
  status          FeedbackStatus   @default(ON_REVIEW)
  content         String
  projectSlug     String
  projectFeedback ProjectFeedback?

  @@id([id, projectSlug])
}

model ProjectSettings {
  id        Int                    @id @default(autoincrement())
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  project   Project                @relation(fields: [projectId], references: [id])
  labels    ProjectFeedbackLabel[]
  projectId Int                    @unique
}

model ProjectFeedbackLabel {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  name        String
  description String?
  color       String
  settings    ProjectSettings   @relation(fields: [settingsId], references: [id])
  settingsId  Int
  feedback    ProjectFeedback[]
}

enum FeedbackCategory {
  BUG
  FEATURE
  IMPROVEMENT
}

enum TokenType {
  RESET_PASSWORD
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum FeedbackStatus {
  ON_REVIEW
  PLANNED
  IN_PROGRESS
  BLOCKED
  CANCELED
  COMPLETED
}

enum ProjectMemberRole {
  FOUNDER
  ADMIN
  MODERATOR
  MEMBER
  FOLLOWER
}
