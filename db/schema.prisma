// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  email           String          @unique
  username        String          @unique
  hashedPassword  String?
  isEmailVerified Boolean         @default(false)
  isVerified      Boolean         @default(false)
  avatarUrl       String?
  bio             String?
  role            UserRole        @default(USER)
  tokens          Token[]
  sessions        Session[]
  projectMember   ProjectMember[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

model Project {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  color       String
  isPrivate   Boolean
  slug        String             @unique
  description String?
  websiteUrl  String?
  logoUrl     String?
  members     ProjectMember[]
  landing     ProjectLanding?
  changelogs  ProjectChangelog[]
  roadmaps    ProjectRoadmap[]
  settings    ProjectSettings?

}

model ProjectMember {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])
  role      ProjectMemberRole @default(FOLLOWER)
  project   Project?          @relation(fields: [projectId], references: [id])
  projectId String?
  userId    Int
}

model ProjectLanding {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model ProjectChangelog {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  content     String
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
}

model ProjectRoadmap {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  slug        String           @unique
  title       String
  description String?
  requests    ProjectRequest[]
  Project     Project?         @relation(fields: [projectId], references: [id])
  projectId   String?
}

model ProjectRequest {
  id               String                @id @default(cuid())
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  title            String
  label            ProjectRequestLabel[]
  type             RequestType
  upvotes          Int                   @default(0)
  projectRoadmap   ProjectRoadmap?       @relation(fields: [projectRoadmapId], references: [id])
  projectRoadmapId Int?
}

model ProjectSettings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model ProjectRequestLabel {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String
  description      String?
  color            String
  projectRequest   ProjectRequest? @relation(fields: [projectRequestId], references: [id])
  projectRequestId String?
}

enum RequestType {
  BUG
  FEATURE
  IMPROVEMENT
}

enum TokenType {
  RESET_PASSWORD
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectMemberRole {
  CREATOR
  ADMIN
  MODERATOR
  FOLLOWER
}
